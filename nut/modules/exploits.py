import json
import logging
from collections import defaultdict
from dataclasses import dataclass
from typing import Optional

from nessus.models import ScanFilters

from nut.config import settings
from nut.utils import nessus, sort_hosts

logger = logging.getLogger(__name__)


class _ExploitFinder:
    def __init__(self, scan_ids: list[int], exploit_framework: Optional[str] = None):
        self.data = {}

        self.scan_ids = scan_ids
        self.framework = exploit_framework
        self.filters = self.get_filters()

    def get_filters(self) -> ScanFilters:
        """Returns a ScanFilters object for  filtering the scan details."""

        logger.info("Filtering vulns for exploitable vulnerabilities")
        filters = [
            {"filter": "exploit_available", "quality": "eq", "value": True},  # Exploit available
            {"filter": "severity", "quality": "neq", "value": 0},  # Not Severity None
        ]

        # Optionally add a filter for the exploit framework
        if self.framework:
            logger.info(f"Filtering vulns for framework '{self.framework}'")
            filters.append({"filter": f"exploit_framework_{self.framework}", "quality": "eq", "value": True})

        return ScanFilters.model_validate({"search_type": "and", "filters": filters})

    @staticmethod
    def get_exploits(vuln_information: dict):
        dictionary = defaultdict(list)

        frameworks = vuln_information["exploit_frameworks"]["exploit_framework"]
        for framework in frameworks:
            framework_name = framework["name"]

            for _, exploits in framework["exploits"].items():
                for exploit in exploits:
                    dictionary[framework_name].append(
                        (exploit["name"], exploit["url"]),
                    )

        return dict(dictionary)

    @staticmethod
    def get_targets(plugin_outputs: dict):
        hostlist = set()

        for output in plugin_outputs:
            for info, targets in output["ports"].items():
                port = info.split(" / ", 1)[0]
                for target in targets:
                    if port == "0":
                        hostlist.add(target["hostname"])
                    else:
                        hostlist.add(f"{target['hostname']}:{port}")

        return sort_hosts(hostlist)

    def add_data(self, plugin_id, plugin_name, scan_id, scan_name, exploits, targets):
        plugin = (plugin_id, plugin_name)
        scan = (scan_id, scan_name)

        if plugin not in self.data:
            self.data[plugin] = {
                "exploits": defaultdict(set),
                "targets": defaultdict(set),
            }

        self.data[plugin]["exploits"].update(exploits)
        self.data[plugin]["targets"][scan].update(targets)

    def lorem(self):
        for scan_id in self.scan_ids:
            scan_details = nessus.get_scan_details(scan_id, filters=self.filters)
            scan_name = scan_details["info"]["name"]

            vulnerabilities = scan_details.get("vulnerabilities", [])
            for vulnerability in vulnerabilities:
                plugin_id = vulnerability["plugin_id"]
                plugin_name = vulnerability["plugin_name"]
                plugin_details = nessus.get_plugin_details(scan_id, plugin_id)

                vuln_information = plugin_details["info"]["plugindescription"]["pluginattributes"]["vuln_information"]
                exploits = self.get_exploits(vuln_information)

                plugin_outputs = plugin_details["outputs"]
                targets = self.get_targets(plugin_outputs)

                self.add_data(plugin_id, plugin_name, scan_id, scan_name, exploits, targets)

    def print(self):
        for plugin, data in self.data.items():
            plugin_id, plugin_name = plugin
            print(f"{plugin_name}")
            for framework, exploits in data["exploits"].items():
                print(f"  {framework}")
                for exploit_name, exploit_url in exploits:
                    print(f"    {exploit_name}")

            for scan, targets in data["targets"].items():
                scan_id, scan_name = scan
                print(f"  {scan_name}")
                for target in targets:
                    print(f"    {target}")


def run():
    scan_ids = settings.scan_ids
    framework = settings.args.framework

    finder = _ExploitFinder(scan_ids, framework)
    finder.lorem()
    finder.print()


class ExploitFinder:
    def __init__(self, scan_ids: list[int], exploit_framework: Optional[str] = None):
        self.data = {}

        self.filter_framework = exploit_framework
        self.filters = self.get_filters()

    def get_filters(self) -> ScanFilters:
        """Returns a ScanFilters object for  filtering the scan details."""

        logger.info("Filtering vulns for exploitable vulnerabilities")
        filters = [
            {"filter": "exploit_available", "quality": "eq", "value": True},  # Exploit available
            {"filter": "severity", "quality": "neq", "value": 0},  # Not Severity None
        ]

        # Optionally add a filter for the exploit framework
        if self.filter_framework:
            logger.info(f"Filtering vulns for framework '{self.filter_framework}'")
            filters.append({"filter": f"exploit_framework_{self.filter_framework}", "quality": "eq", "value": True})

        return ScanFilters.model_validate({"search_type": "and", "filters": filters})

    @staticmethod
    def _get_exploits(vuln_information: dict):
        dictionary = defaultdict(list)

        frameworks = vuln_information["exploit_frameworks"]["exploit_framework"]
        for framework in frameworks:
            framework_name = framework["name"]

            for _, exploits in framework["exploits"].items():
                for exploit in exploits:
                    dictionary[framework_name].append(
                        (exploit["name"], exploit["url"]),
                    )

        return dict(dictionary)

    def _add_data(self, scan_id, scan_name, plugin_id, plugin_name, exploits):
        # If there's no entry for the plugin create a new entry
        if plugin_id not in self.data:
            self.data[plugin_id] = {
                "plugin_name": plugin_name,
                "exploits": {},
                "targets": {},
            }

        self.data[plugin_id]["exploits"].update(exploits)

        targets_dict = self.data[plugin_id]["targets"]
        if scan_id not in targets_dict:
            targets_dict[scan_id] = {}

        # self.data[plugin_id]["targets"]

    def fetch_data(self, scan_ids):
        for scan_id in scan_ids:
            scan_details = nessus.get_scan_details(scan_id, filters=self.filters)
            scan_name = scan_details.get("name")

            vulnerabilities = scan_details.get("vulnerabilities")
            for vulnerability in vulnerabilities:
                plugin_id = vulnerability["plugin_id"]
                plugin_name = vulnerability["plugin_name"]

                plugin_details = nessus.get_plugin_details(scan_id, plugin_id)

                vuln_information = plugin_details["info"]["plugindescription"]["pluginattributes"]["vuln_information"]
                exploits = self._get_exploits(vuln_information)

                self._add_data(scan_id, scan_name, plugin_id, plugin_name, exploits)


# def get_exploits_dict(scan_vuln_information: dict):
#     exploits_dict = defaultdict(list)
#
#     exploit_frameworks = scan_vuln_information["exploit_frameworks"]["exploit_framework"]
#     for framework in exploit_frameworks:
#         framework_name = framework["name"]
#
#         for _, exploits in framework["exploits"].items():
#             for exploit in exploits:
#                 exploits_dict[framework_name].append(
#                     (exploit["name"], exploit["url"]),
#                 )
#
#     return dict(exploits_dict)
#
#
# def run():
#     filters = get_filters()
#
#     # PRINT: plugin name, link to plugin in nessus, metasploit module name (if exists), cve
#
#     for scan_id in settings.scan_ids:
#         scan_details = nessus.get_scan_details(scan_id, filters=filters)
#         scan_name = scan_details["info"]["name"]
#
#         print(scan_name)
#
#         for vulnerability in scan_details["vulnerabilities"]:
#             plugin_id = vulnerability["plugin_id"]
#             plugin_name = vulnerability["plugin_name"]
#
#             print(f"  {plugin_name}")
#
#             plugin_details = nessus.get_plugin_details(scan_id, plugin_id)
#
#             # I know this is messy, but the response is nested like crazy
#             vuln_information = plugin_details["info"]["plugindescription"]["pluginattributes"]["vuln_information"]
#
#             for framework, exploits in get_exploits_dict(vuln_information).items():
#                 print(f"    {framework}")
#                 for exploit_name, exploit_url in exploits:
#                     print(f"      {exploit_name}")
#
#             print()
#         print()
