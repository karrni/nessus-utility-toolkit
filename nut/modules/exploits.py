import json
import logging
from collections import defaultdict
from typing import Optional

from nessus.models import ScanFilters
from prettytable import PrettyTable

from nut.settings import args
from nut.utils import nessus, sort_hosts

logger = logging.getLogger(__name__)


class ExploitFinder:
    def __init__(self, scan_ids: list[int], framework: Optional[str] = str):
        self.data = {}

        self.scan_ids = scan_ids
        self.framework = framework
        self.filters = self._get_filters()

    @staticmethod
    def _get_exploits(vuln_info: dict):
        # This is only guaranteed to exist if a framework was supplied
        exploit_frameworks = vuln_info.get("exploit_frameworks")
        if exploit_frameworks is None:
            return {}

        exploits_dict = defaultdict(list)

        frameworks = exploit_frameworks["exploit_framework"]

        for framework in frameworks:
            framework_name = framework["name"]

            # Ensure the framework_name key exists
            _ = exploits_dict[framework_name]

            framework_exploits = framework.get("exploits")
            if framework_exploits is None:
                continue

            for _, exploits in framework_exploits.items():
                for exploit in exploits:
                    exploits_dict[framework_name].append(exploit)

        return dict(exploits_dict)

    @staticmethod
    def _get_targets(plugin_outputs: dict):
        hostlist = set()

        for output in plugin_outputs:
            for info, targets in output["ports"].items():
                # 'Info' stores how Nessus groups hosts into ports. It looks
                # like this: 80 / tcp / tcp
                port = info.split(" / ", 1)[0]

                for target in targets:
                    if port == "0":
                        hostlist.add(target["hostname"])
                    else:
                        hostlist.add(f"{target['hostname']}:{port}")

        return sort_hosts(hostlist)

    def _get_filters(self) -> ScanFilters:
        """Returns a ScanFilters instance for filtering the scan details."""

        logger.info("Filtering vulns for exploitable vulnerabilities")

        filter_defs = [
            {"filter": "exploit_available", "quality": "eq", "value": True},  # Exploit available
            {"filter": "severity", "quality": "neq", "value": 0},  # Not Severity None
        ]

        # Optionally add a filter for the exploit framework
        if self.framework:
            logger.info(f"Filtering vulns for framework '{self.framework}'")
            filter_defs.append({"filter": f"exploit_framework_{self.framework}", "quality": "eq", "value": True})

        return ScanFilters.model_validate({"search_type": "and", "filters": filter_defs})

    def _add_data(self, plugin_id: int, plugin_name: str, scan_id: int, scan_name: str, exploits: dict, targets: list):
        plugin = (plugin_id, plugin_name)
        scan = (scan_id, scan_name)

        if plugin not in self.data:
            self.data[plugin] = {
                "exploits": defaultdict(set),
                "targets": defaultdict(set),
            }

        self.data[plugin]["exploits"].update(exploits)
        self.data[plugin]["targets"][scan].update(targets)

    def start(self):
        for scan_id in self.scan_ids:
            scan_details = nessus.get_scan_details(scan_id, filters=self.filters)
            scan_name = scan_details["info"]["name"]

            vulnerabilities = scan_details.get("vulnerabilities", [])
            for vulnerability in vulnerabilities:
                plugin_id = vulnerability["plugin_id"]
                plugin_name = vulnerability["plugin_name"]
                plugin_details = nessus.get_plugin_details(scan_id, plugin_id)

                vuln_info = plugin_details["info"]["plugindescription"]["pluginattributes"]["vuln_information"]
                exploits = self._get_exploits(vuln_info)

                plugin_outputs = plugin_details["outputs"]
                targets = self._get_targets(plugin_outputs)

                self._add_data(plugin_id, plugin_name, scan_id, scan_name, exploits, targets)

    def print(self):
        print("\n")

        for plugin, data in self.data.items():
            plugin_id, plugin_name = plugin

            print(f"{plugin_name}")

            for framework, exploits in data["exploits"].items():
                exploits_str = ", ".join([e["name"] for e in exploits])
                print(f"  {framework}: {exploits_str}")

            print()

            for scan, targets in data["targets"].items():
                scan_id, scan_name = scan

                print(f"  {scan_name} ({scan_id})")

                for target in targets:
                    print(f"    {target}")

            print("\n")


def run():
    logger.info("Searching scans for exploitable vulns")

    finder = ExploitFinder(args.scan_ids, args.framework)
    finder.start()
    finder.print()
